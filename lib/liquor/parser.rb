#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Liquor
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 190)
  attr_reader :errors, :ast

  def initialize(tags={})
    super()

    @errors = []
    @ast    = nil
    @tags   = tags
  end

  def success?
    @errors.empty?
  end

  def parse(string)
    @errors.clear
    @ast = nil

    begin
      @stream = Lexer.lex(string, @tags)
      @ast = do_parse
    rescue Liquor::SyntaxError => e
      @errors << e
    end

    success?
  end

  def next_token
    tok = @stream.shift
    [ tok[0], tok ] if tok
  end

  TOKEN_NAME_MAP = {
    :comma    => ',',
    :dot      => '.',
    :lblock   => '{%',
    :rblock   => '%}',
    :linterp  => '{{',
    :rinterp  => '}}',
    :lbracket => '[',
    :rbracket => ']',
    :lparen   => '(',
    :rparen   => ')',
    :pipe     => '|',
    :op_not   => '!',
    :op_mul   => '*',
    :op_div   => '/',
    :op_mod   => '%',
    :op_plus  => '+',
    :op_minus => '-',
    :op_eq    => '==',
    :op_neq   => '!=',
    :op_lt    => '<',
    :op_leq   => '<=',
    :op_gt    => '>',
    :op_geq   => '>=',
    :keyword  => 'keyword argument name',
    :kwarg    => 'keyword argument',
    :ident    => 'identifier',
  }

  def on_error(error_token_id, error_token, value_stack)
    if token_to_str(error_token_id) == "$end"
      raise Liquor::SyntaxError.new("unexpected end of stream")
    else
      type, (loc, value) = error_token
      type = TOKEN_NAME_MAP[type] || type
      raise Liquor::SyntaxError.new("unexpected token `#{type}'", loc)
    end
  end

  def retag(nodes)
    loc = nodes.map { |node| node[1] }.compact
    first, *, last = loc
    return first if last.nil?

    {
      line:  first[:line],
      start: first[:start],
      end:    last[:end],
    }
  end

  def reduce_tag_args(list)
    list.each_slice(2).reduce([]) { |args, (k, v)|
      if v[0] == :block
        args << [ :blockarg, retag([ k, v ]), k, v[2] || [] ]
      else
        args << [ :kwarg,    retag([ k, v ]), k, v          ]
      end
    }
  end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    76,    25,    86,     6,    96,     6,     5,    97,     5,    53,
    42,    27,    31,    35,    36,    33,    34,    30,    28,    26,
    32,     2,    29,     2,    40,    25,    23,     6,    96,    73,
     5,    97,    69,    37,    38,    27,    31,    35,    36,    33,
    34,    30,    28,    26,    32,     2,    29,    96,    69,    25,
    97,     6,    22,     6,     5,    94,     5,    37,    38,    27,
    31,    35,    36,    33,    34,    30,    28,    26,    32,     2,
    29,     2,    44,    25,    98,     6,    77,   102,     5,    42,
    25,    37,    38,    27,    31,    35,    36,    33,    34,    30,
    28,    26,    32,     2,    29,    25,   107,    25,     7,     6,
    25,    73,     5,   111,    83,    37,    38,    27,    31,    35,
    36,    33,    34,    30,    28,    26,    32,     2,    29,   nil,
   nil,    25,   nil,   nil,    74,    52,   nil,   nil,   nil,    37,
    38,    27,    31,    35,    36,    33,    34,    30,    28,    26,
    32,   nil,    29,   nil,   nil,    51,    25,    96,   nil,   nil,
    97,   nil,   nil,    37,    38,   nil,    27,    31,    35,    36,
    33,    34,    30,    28,    26,    32,   nil,    29,   nil,   nil,
    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,
    27,    31,    35,    36,    33,    34,    30,    28,    26,    32,
   nil,    29,   nil,   nil,    25,    88,   nil,   nil,   nil,   nil,
   nil,   nil,    37,    38,    27,    31,    35,    36,    33,    34,
    30,    28,    26,    32,   nil,    29,    39,   nil,    25,   nil,
    24,   nil,    73,   nil,   nil,   nil,    37,    38,    27,    31,
    35,    36,    33,    34,    30,    28,    26,    32,   nil,    29,
   nil,   nil,    25,   nil,   nil,   nil,    52,   nil,   nil,   nil,
    37,    38,    27,    31,    35,    36,    33,    34,    30,    28,
    26,    32,   nil,    29,   nil,   nil,    51,    25,   nil,   nil,
   nil,   nil,   nil,   nil,    37,    38,   nil,    27,    31,    35,
    36,    33,    34,    30,    28,    26,    32,   nil,    29,    13,
    15,   nil,   nil,   nil,    21,   nil,    14,   nil,   nil,    37,
   nil,   nil,   nil,    19,    13,    15,   nil,    20,   nil,    21,
   nil,    14,   nil,   nil,   nil,    16,   nil,   nil,    19,    13,
    15,   nil,    20,   nil,    21,   nil,    14,   nil,   nil,   nil,
    16,   nil,   nil,    19,    13,    15,   nil,    20,   nil,    21,
   nil,    14,   nil,   nil,   nil,    16,   nil,   nil,    19,    13,
    15,    52,    20,   nil,    21,   nil,    14,   nil,   nil,    25,
    16,   nil,   nil,    19,   nil,    13,    15,    20,   nil,    27,
    21,    51,    14,   nil,   nil,    16,    28,    26,   nil,    19,
    13,    15,   nil,    20,   nil,    21,   nil,    14,   nil,   nil,
   nil,    16,   nil,   nil,    19,    13,    15,   nil,    20,   nil,
    21,   nil,    14,   nil,   nil,   nil,    16,   nil,   nil,    19,
    13,    15,   nil,    20,   nil,    21,   nil,    14,   nil,   nil,
   nil,    16,   nil,   nil,    19,    13,    15,   nil,    20,   nil,
    21,   nil,    14,   nil,   nil,   nil,    16,   nil,   nil,    19,
    13,    15,   nil,    20,   nil,    21,   nil,    14,   nil,   nil,
   nil,    16,   nil,   nil,    19,    13,    15,   nil,    20,   nil,
    21,   nil,    14,   nil,   nil,   nil,    16,   nil,   nil,    19,
    13,    15,   nil,    20,   nil,    21,   nil,    14,   nil,   nil,
   nil,    16,   nil,   nil,    19,    13,    15,   nil,    20,   nil,
    21,   nil,    14,   nil,   nil,   nil,    16,   nil,   nil,    19,
    13,    15,   nil,    20,   nil,    21,   nil,    14,   nil,   nil,
   nil,    16,   nil,   nil,    19,    13,    15,   nil,    20,   nil,
    21,   nil,    14,   nil,   nil,   nil,    16,   nil,   nil,    19,
    13,    15,   nil,    20,   nil,    21,   nil,    14,   nil,   nil,
   nil,    16,   nil,   nil,    19,    13,    15,   nil,    20,   nil,
    21,   nil,    14,   nil,   nil,   nil,    16,   nil,   nil,    19,
    13,    15,   nil,    20,   nil,    21,   nil,    14,   nil,   nil,
   nil,    16,   nil,    25,    19,    13,    15,   nil,    20,   nil,
    21,   nil,    14,    27,   nil,   nil,    16,   nil,   nil,    19,
    28,    26,   nil,    20,   nil,   nil,   nil,    81,    13,    15,
    73,    16,   nil,    21,   nil,    14,   nil,   nil,    13,    15,
   nil,   nil,    19,    21,   nil,    14,    20,   nil,    13,    15,
   nil,   nil,    19,    21,    16,    14,    20,   nil,    13,    15,
   101,   nil,    19,    21,    16,    14,    20,   nil,    13,    15,
   nil,   nil,    19,    21,    16,    14,    20,   nil,    13,    15,
   106,    25,    19,    21,    16,    14,    20,   nil,   nil,   nil,
   nil,    27,    19,   nil,    16,    25,    20,    30,    28,    26,
   nil,   nil,    29,   nil,    16,    27,    31,    35,    36,    33,
    34,    30,    28,    26,    32,    25,    29,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    25,    27,   nil,   nil,   nil,   nil,
   nil,    30,    28,    26,    27,   nil,    29,    25,   nil,   nil,
    30,    28,    26,   nil,   nil,    29,    25,    27,   nil,   nil,
   nil,   nil,   nil,    30,    28,    26,    27,   nil,    29,    25,
   nil,   nil,    30,    28,    26,   nil,   nil,    29,   nil,    27,
   nil,   nil,   nil,   nil,   nil,    30,    28,    26,   nil,   nil,
    29 ]

racc_action_check = [
    47,    47,    71,     0,   111,   106,     0,   111,   106,    25,
    13,    47,    47,    47,    47,    47,    47,    47,    47,    47,
    47,     0,    47,   106,    12,    87,     7,     2,   107,    87,
     2,   107,    39,    47,    47,    87,    87,    87,    87,    87,
    87,    87,    87,    87,    87,     2,    87,    94,    83,    46,
    94,   101,     6,     3,   101,    91,     3,    87,    87,    46,
    46,    46,    46,    46,    46,    46,    46,    46,    46,   101,
    46,     3,    18,    99,    96,     4,    48,    99,     4,    53,
    54,    46,    46,    99,    99,    99,    99,    99,    99,    99,
    99,    99,    99,     4,    99,    55,   103,    43,     1,    81,
    56,    69,    81,   109,    68,    99,    99,    43,    43,    43,
    43,    43,    43,    43,    43,    43,    43,    81,    43,   nil,
   nil,    49,   nil,   nil,    43,    49,   nil,   nil,   nil,    43,
    43,    49,    49,    49,    49,    49,    49,    49,    49,    49,
    49,   nil,    49,   nil,   nil,    49,   104,   104,   nil,   nil,
   104,   nil,   nil,    49,    49,   nil,   104,   104,   104,   104,
   104,   104,   104,   104,   104,   104,   nil,   104,   nil,   nil,
    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   104,   104,
    75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
   nil,    75,   nil,   nil,    11,    75,   nil,   nil,   nil,   nil,
   nil,   nil,    75,    75,    11,    11,    11,    11,    11,    11,
    11,    11,    11,    11,   nil,    11,    11,   nil,    70,   nil,
    11,   nil,    70,   nil,   nil,   nil,    11,    11,    70,    70,
    70,    70,    70,    70,    70,    70,    70,    70,   nil,    70,
   nil,   nil,    79,   nil,   nil,   nil,    79,   nil,   nil,   nil,
    70,    70,    79,    79,    79,    79,    79,    79,    79,    79,
    79,    79,   nil,    79,   nil,   nil,    79,    66,   nil,   nil,
   nil,   nil,   nil,   nil,    79,    79,   nil,    66,    66,    66,
    66,    66,    66,    66,    66,    66,    66,   nil,    66,    26,
    26,   nil,   nil,   nil,    26,   nil,    26,   nil,   nil,    66,
   nil,   nil,   nil,    26,    19,    19,   nil,    26,   nil,    19,
   nil,    19,   nil,   nil,   nil,    26,   nil,   nil,    19,    20,
    20,   nil,    19,   nil,    20,   nil,    20,   nil,   nil,   nil,
    19,   nil,   nil,    20,    21,    21,   nil,    20,   nil,    21,
   nil,    21,   nil,   nil,   nil,    20,   nil,   nil,    21,    22,
    22,    22,    21,   nil,    22,   nil,    22,   nil,   nil,    57,
    21,   nil,   nil,    22,   nil,    76,    76,    22,   nil,    57,
    76,    22,    76,   nil,   nil,    22,    57,    57,   nil,    76,
    14,    14,   nil,    76,   nil,    14,   nil,    14,   nil,   nil,
   nil,    76,   nil,   nil,    14,    27,    27,   nil,    14,   nil,
    27,   nil,    27,   nil,   nil,   nil,    14,   nil,   nil,    27,
    28,    28,   nil,    27,   nil,    28,   nil,    28,   nil,   nil,
   nil,    27,   nil,   nil,    28,    29,    29,   nil,    28,   nil,
    29,   nil,    29,   nil,   nil,   nil,    28,   nil,   nil,    29,
     5,     5,   nil,    29,   nil,     5,   nil,     5,   nil,   nil,
   nil,    29,   nil,   nil,     5,    31,    31,   nil,     5,   nil,
    31,   nil,    31,   nil,   nil,   nil,     5,   nil,   nil,    31,
    32,    32,   nil,    31,   nil,    32,   nil,    32,   nil,   nil,
   nil,    31,   nil,   nil,    32,    33,    33,   nil,    32,   nil,
    33,   nil,    33,   nil,   nil,   nil,    32,   nil,   nil,    33,
    34,    34,   nil,    33,   nil,    34,   nil,    34,   nil,   nil,
   nil,    33,   nil,   nil,    34,    35,    35,   nil,    34,   nil,
    35,   nil,    35,   nil,   nil,   nil,    34,   nil,   nil,    35,
    36,    36,   nil,    35,   nil,    36,   nil,    36,   nil,   nil,
   nil,    35,   nil,   nil,    36,    37,    37,   nil,    36,   nil,
    37,   nil,    37,   nil,   nil,   nil,    36,   nil,   nil,    37,
    38,    38,   nil,    37,   nil,    38,   nil,    38,   nil,   nil,
   nil,    37,   nil,    58,    38,    52,    52,   nil,    38,   nil,
    52,   nil,    52,    58,   nil,   nil,    38,   nil,   nil,    52,
    58,    58,   nil,    52,   nil,   nil,   nil,    52,    42,    42,
    42,    52,   nil,    42,   nil,    42,   nil,   nil,    97,    97,
   nil,   nil,    42,    97,   nil,    97,    42,   nil,    44,    44,
   nil,   nil,    97,    44,    42,    44,    97,   nil,   102,   102,
    97,   nil,    44,   102,    97,   102,    44,   nil,    73,    73,
   nil,   nil,   102,    73,    44,    73,   102,   nil,    30,    30,
   102,    64,    73,    30,   102,    30,    73,   nil,   nil,   nil,
   nil,    64,    30,   nil,    73,    65,    30,    64,    64,    64,
   nil,   nil,    64,   nil,    30,    65,    65,    65,    65,    65,
    65,    65,    65,    65,    65,    63,    65,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    62,    63,   nil,   nil,   nil,   nil,
   nil,    63,    63,    63,    62,   nil,    63,    61,   nil,   nil,
    62,    62,    62,   nil,   nil,    62,    60,    61,   nil,   nil,
   nil,   nil,   nil,    61,    61,    61,    60,   nil,    61,    59,
   nil,   nil,    60,    60,    60,   nil,   nil,    60,   nil,    59,
   nil,   nil,   nil,   nil,   nil,    59,    59,    59,   nil,   nil,
    59 ]

racc_action_pointer = [
    -5,    98,    19,    45,    67,   435,    47,    26,   nil,   nil,
   nil,   191,    -5,    -2,   375,   nil,   nil,   nil,    62,   299,
   314,   329,   344,   nil,   nil,     4,   284,   390,   405,   420,
   643,   450,   465,   480,   495,   510,   525,   540,   555,    27,
   nil,   nil,   593,    94,   613,   nil,    46,    -2,    48,   118,
   nil,   nil,   570,    67,    77,    92,    97,   356,   570,   726,
   713,   704,   691,   682,   648,   662,   264,   nil,    79,    94,
   215,   -28,   nil,   633,   nil,   167,   360,   nil,   nil,   239,
   nil,    91,   nil,    43,   nil,   nil,   nil,    22,   nil,   nil,
   nil,    46,   nil,   nil,    43,   nil,    47,   603,   nil,    70,
   nil,    43,   623,    87,   143,   nil,    -3,    24,   nil,    94,
   nil,     0,   nil ]

racc_action_default = [
    -1,   -57,    -1,    -1,    -1,   -57,   -57,   -57,    -2,    -3,
    -4,   -57,   -57,    -7,   -57,    -9,   -10,   -11,   -31,   -57,
   -57,   -35,   -57,   113,    -5,   -57,   -57,   -57,   -57,   -57,
   -57,   -57,   -57,   -57,   -57,   -57,   -57,   -57,   -57,   -57,
    -6,   -12,   -40,   -57,   -57,   -16,   -17,   -34,   -57,   -57,
   -46,   -47,   -57,   -15,   -18,   -19,   -20,   -21,   -22,   -23,
   -24,   -25,   -26,   -27,   -28,   -29,   -30,   -41,   -43,   -40,
   -40,   -57,   -38,   -57,    -8,   -57,   -35,   -32,   -45,   -57,
   -48,    -1,   -14,   -57,   -44,   -37,   -36,   -40,   -13,   -33,
   -50,   -57,   -42,   -39,   -57,   -49,   -57,   -57,   -51,   -57,
   -52,    -1,   -57,   -57,   -57,   -54,    -1,   -57,   -56,   -57,
   -53,   -57,   -55 ]

racc_goto_table = [
     1,    11,     8,     9,    10,    48,    67,    41,    50,    72,
    43,    80,    12,    71,   100,    45,    46,   105,    49,   nil,
   nil,   nil,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    78,    84,    85,    70,    95,
    75,   nil,   nil,   nil,   nil,   nil,   nil,    82,    79,   108,
    92,   nil,   110,   nil,    93,   nil,   112,   nil,   nil,   nil,
    89,   nil,   nil,   nil,   nil,    90,   nil,   nil,   nil,    87,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    91,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    99,   nil,   nil,   nil,   nil,   104,   nil,
   nil,   103,   nil,   nil,   nil,   nil,   109 ]

racc_goto_check = [
     1,     4,     1,     1,     1,     9,    12,     8,    14,    11,
     4,    15,     5,    10,    17,     4,     4,    18,     4,   nil,
   nil,   nil,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,    14,    11,    11,     4,    16,
     4,   nil,   nil,   nil,   nil,   nil,   nil,     8,     4,    16,
    12,   nil,    16,   nil,    11,   nil,    16,   nil,   nil,   nil,
     9,   nil,   nil,   nil,   nil,    14,   nil,   nil,   nil,     4,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     1,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     4,   nil,   nil,   nil,   nil,     4,   nil,
   nil,     1,   nil,   nil,   nil,   nil,     1 ]

racc_goto_pointer = [
   nil,     0,   nil,   nil,    -4,     7,   nil,   nil,    -6,   -16,
   -29,   -33,   -33,   nil,   -14,   -41,   -55,   -83,   -85 ]

racc_goto_default = [
   nil,   nil,     3,     4,    47,   nil,    18,    17,   nil,   nil,
   nil,   nil,   nil,    68,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 38, :_reduce_none,
  2, 38, :_reduce_2,
  2, 38, :_reduce_3,
  2, 38, :_reduce_4,
  3, 39, :_reduce_5,
  3, 39, :_reduce_6,
  1, 43, :_reduce_none,
  3, 43, :_reduce_8,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  2, 41, :_reduce_12,
  4, 41, :_reduce_13,
  4, 41, :_reduce_14,
  3, 41, :_reduce_15,
  2, 41, :_reduce_16,
  2, 41, :_reduce_17,
  3, 41, :_reduce_18,
  3, 41, :_reduce_19,
  3, 41, :_reduce_20,
  3, 41, :_reduce_21,
  3, 41, :_reduce_22,
  3, 41, :_reduce_23,
  3, 41, :_reduce_24,
  3, 41, :_reduce_25,
  3, 41, :_reduce_26,
  3, 41, :_reduce_27,
  3, 41, :_reduce_28,
  3, 41, :_reduce_29,
  3, 41, :_reduce_30,
  1, 41, :_reduce_none,
  3, 44, :_reduce_32,
  3, 46, :_reduce_33,
  1, 46, :_reduce_34,
  0, 46, :_reduce_35,
  3, 45, :_reduce_36,
  2, 47, :_reduce_37,
  1, 47, :_reduce_38,
  3, 48, :_reduce_39,
  0, 48, :_reduce_40,
  3, 42, :_reduce_41,
  3, 49, :_reduce_42,
  1, 49, :_reduce_43,
  2, 50, :_reduce_44,
  4, 40, :_reduce_45,
  3, 40, :_reduce_46,
  1, 51, :_reduce_47,
  2, 51, :_reduce_48,
  4, 52, :_reduce_49,
  2, 52, :_reduce_50,
  2, 53, :_reduce_51,
  2, 53, :_reduce_52,
  4, 54, :_reduce_53,
  3, 54, :_reduce_54,
  4, 55, :_reduce_55,
  2, 55, :_reduce_56 ]

racc_reduce_n = 57

racc_shift_n = 113

racc_token_table = {
  false => 0,
  :error => 1,
  :comma => 2,
  :dot => 3,
  :endtag => 4,
  :ident => 5,
  :integer => 6,
  :keyword => 7,
  :lblock => 8,
  :lblock2 => 9,
  :lbracket => 10,
  :linterp => 11,
  :lparen => 12,
  :op_div => 13,
  :op_eq => 14,
  :op_gt => 15,
  :op_geq => 16,
  :op_lt => 17,
  :op_leq => 18,
  :op_minus => 19,
  :op_mod => 20,
  :op_mul => 21,
  :op_neq => 22,
  :op_not => 23,
  :op_plus => 24,
  :pipe => 25,
  :plaintext => 26,
  :rblock => 27,
  :rbracket => 28,
  :rinterp => 29,
  :rparen => 30,
  :string => 31,
  :tag_ident => 32,
  :op_uminus => 33,
  :op_neg => 34,
  :op_and => 35,
  :op_or => 36 }

racc_nt_base = 37

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "comma",
  "dot",
  "endtag",
  "ident",
  "integer",
  "keyword",
  "lblock",
  "lblock2",
  "lbracket",
  "linterp",
  "lparen",
  "op_div",
  "op_eq",
  "op_gt",
  "op_geq",
  "op_lt",
  "op_leq",
  "op_minus",
  "op_mod",
  "op_mul",
  "op_neq",
  "op_not",
  "op_plus",
  "pipe",
  "plaintext",
  "rblock",
  "rbracket",
  "rinterp",
  "rparen",
  "string",
  "tag_ident",
  "op_uminus",
  "op_neg",
  "op_and",
  "op_or",
  "$start",
  "block",
  "interp",
  "tag",
  "expr",
  "filter_chain",
  "primary_expr",
  "tuple",
  "function_args",
  "tuple_content",
  "function_args_inside",
  "function_keywords",
  "filter_chain_cont",
  "filter_call",
  "tag_first_cont",
  "tag_first_cont2",
  "tag_next_cont",
  "tag_next_cont2",
  "tag_next_cont3" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_2(val, _values, result)
     result = [ val[0], *val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 25)
  def _reduce_3(val, _values, result)
     result = [ val[0], *val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 27)
  def _reduce_4(val, _values, result)
     result = [ val[0], *val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 31)
  def _reduce_5(val, _values, result)
     result = [ :interp, retag(val), val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 33)
  def _reduce_6(val, _values, result)
     result = [ :interp, retag(val), val[1] ] 
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_8(val, _values, result)
     result = [ val[1][0], retag(val), *val[1][2..-1] ] 
    result
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_12(val, _values, result)
     result = [ :call,   retag(val), val[0], val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_13(val, _values, result)
     result = [ :index,  retag(val), val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_14(val, _values, result)
     result = [ :external, retag(val), val[0], val[2], val[3] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_15(val, _values, result)
     result = [ :external, retag(val), val[0], val[2], nil ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_16(val, _values, result)
     result = [ :uminus, retag(val), val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_17(val, _values, result)
     result = [ :not, retag(val), val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_18(val, _values, result)
     result = [ :mul, retag(val), val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_19(val, _values, result)
     result = [ :div, retag(val), val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 61)
  def _reduce_20(val, _values, result)
     result = [ :mod, retag(val), val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_21(val, _values, result)
     result = [ :plus, retag(val), val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_22(val, _values, result)
     result = [ :minus, retag(val), val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_23(val, _values, result)
     result = [ :eq, retag(val), val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_24(val, _values, result)
     result = [ :neq, retag(val), val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_25(val, _values, result)
     result = [ :lt, retag(val), val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_26(val, _values, result)
     result = [ :leq, retag(val), val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 75)
  def _reduce_27(val, _values, result)
     result = [ :gt, retag(val), val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_28(val, _values, result)
     result = [ :geq, retag(val), val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_29(val, _values, result)
     result = [ :and, retag(val), val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_30(val, _values, result)
     result = [ :or, retag(val), val[0], val[2] ] 
    result
  end
.,.,

# reduce 31 omitted

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_32(val, _values, result)
     result = [ :tuple, retag(val), val[1].compact ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 90)
  def _reduce_33(val, _values, result)
     result = [ val[0], *val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_34(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_35(val, _values, result)
     result = [ ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 98)
  def _reduce_36(val, _values, result)
     result = [ :args, retag(val), *val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 102)
  def _reduce_37(val, _values, result)
     result = [ val[0], val[1][2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_38(val, _values, result)
     result = [ nil,    val[0][2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_39(val, _values, result)
     name = val[0][2].to_sym
        tail = val[2][2]
        loc  = retag([ val[0], val[1] ])

        if tail.include? name
          @errors << SyntaxError.new("duplicate keyword argument `#{val[0][2]}'",
              tail[name][1])
        end

        hash = {
          name => [ val[1][0], loc, *val[1][2..-1] ]
        }.merge(tail)

        result = [ :keywords, retag([ loc, val[2] ]), hash ]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_40(val, _values, result)
     result = [ :keywords, nil, {} ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_41(val, _values, result)
     result = [ val[0], *val[2] ].
            reduce { |tree, node| node[3][2] = tree; node }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_42(val, _values, result)
     result = [ val[0], *val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 136)
  def _reduce_43(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 140)
  def _reduce_44(val, _values, result)
     ident_loc = val[0][1]
        empty_args_loc = { line:  ident_loc[:line],
                           start: ident_loc[:end] + 1,
                           end:   ident_loc[:end] + 1, }
        result = [ :call, val[0][1], val[0],
                   [ :args, val[1][1] || empty_args_loc, nil, val[1][2] ] ]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 150)
  def _reduce_45(val, _values, result)
     result = [ :tag, retag(val), val[1], val[2], *reduce_tag_args(val[3][2]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 152)
  def _reduce_46(val, _values, result)
     result = [ :tag, retag(val), val[1], nil,    *reduce_tag_args(val[2][2]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_47(val, _values, result)
     result = [ :cont,  retag(val), [] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_48(val, _values, result)
     result = [ :cont,  retag(val), [ val[0], *val[1][2] ] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_49(val, _values, result)
     result = [ :cont2, val[0][1],  [ [:block, val[0][1], val[1] ], *val[3] ] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_50(val, _values, result)
     result = [ :cont2, retag(val), [ val[0], *val[1][2] ] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_51(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 174)
  def _reduce_52(val, _values, result)
     result = [ val[0], *val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_53(val, _values, result)
     result = [ [:block, val[0][1], val[1] ], *val[3] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 180)
  def _reduce_54(val, _values, result)
     result = [ val[0], val[1], *val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_55(val, _values, result)
     result = [ [:block, val[0][1], val[1] ], *val[3] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 186)
  def _reduce_56(val, _values, result)
     result = [ val[0], *val[1] ] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Liquor
